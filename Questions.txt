Questions:
1) How do you modify the webdriver flag to prevent detection?
    There are some ways where you can prevent detection:

    1. Removing Navigator.Webdriver Flag:
    The Navigator.Webdriver Flag indicates whether the browser is controlled by automation tools such as Selenium. It is usually set to true when the 
    --enable-automation, the --headless flag, or the --remote-debugging-port is enabled in Chrome.
    For Firefox the marionette.enabled Flag or --marionette has to be set. So the solution is to remove this flag.

    2. Changing Resolution, User-Agent, and other Details
    One of the ways a Website will detect you is by creating a Browser fingerprint using your Monitor Resolution, 
    User-Agent, and other details and then checking if you are making an abnormal amount of requests a Real Human 
    could never make or applying other heuristics to detect if you are a Bot.

    firefox_options = webdriver.FirefoxOptions()
    firefox_options.add_argument("window-size=1080,1920")
    firefox_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36")
    driver = webdriver.Remote('http://localhost:5555/wd/hub',desired_capabilities= webdriver.DesiredCapabilities.FIREFOX,options=firefox_options)
    driver.maximize_window()

    3. Do a realistic Page Flow
    That is why some sites set cookies when you visit a certain page and then when you make further requests, they will check if the cookies are present. 
    They could also track page flow and look for patterns to determine whether the requests are from a real person.

    4. Changing IP Address using Proxyâ€™s
        firefox_options.add_argument('proxy-server=106.122.8.54:3128')

    5. Use Random Delays
        time.sleep(random_secs)


2) Can automation testing fully replace manual testing?
No, there are some cases where it is not appropriate to automate, for example:
    *Usability test
    *Tests that will be run only once
    *Tests without predictable results
    *Unstable applications

The cases in which it is correct to automate are:
    * Tests that must be executed every time the application under test is modified.
    * Tests that use multiple data values for the same cases
    * Tests that require detailed information on the system's internal states (SQL, GUI, etc.)
    * Stress or load tests (Performance)
    * Test data generation
    * Test that must be executed in various environments 

Comparison between manual test and automation test:
Manual test:
    * Success depends on the skill of the person who executes it
    * Difficult to document
    * Difficult to keep updated
    * Slower and more tedious
    * It is usually seen more as an artisan process than an engineering one.

Automation test:
    * The result does not depend on who executes it.
    * Self-documented
    * Auto-updateable before changes in application
    * Faster
    * Repeatable
    * Reusable 